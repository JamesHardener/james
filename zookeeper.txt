
		Zookeeper	
			安装报错: 
				1. 双击zkServer.cmd闪退
					在zkServer.cmd 中endlocal 上一行添加 pause   双击zkServer.cmd 会打印报错
					在zkEnv.cmd中 将 zoo.cfg 改为 zoo_sample.cfg   ( set ZOOCFG=%ZOOCFGDIR%\zoo_sample.cfg )
				2. 报错找不到Java_Home		
					在if not defined JAVA_HOME  前一行 添加 set JAVA_HOME=C:\Program Files\Java\jdk1.8.0_172 写死路径

			ZooInspector 可视化 连接客户端
		
			定义: 一个分布式开源框架  解决分布式协调工具
			应用场景: 	
				Dubbo    rpc远程调用框架 + zookeeper注册中心 (命名服务)
				发布订阅	watcher  对zk节点发生变化,都会有事件通知
				负载均衡	
				分布式通知	watcher
				master选举	主 备  投票机制  ping机制心跳检测
				Zookeeper分布式锁 Redis分布式锁
				Zookeeper分布式配置中心
				Zookeeper实现原理
		
			Zookeeper的数据结构   树形存储  节点名称 内容 不允许重复
				节点类型: 持久性节点  永久保存硬盘
						  持久顺序节点	声明周期绑定 连接断开 节点信息删除
						  临时节点	  zk连接关闭后,节点信息立即删除
						  临时顺序节点	
						  
				节点watcher节点事件通知    节点发生改变,通知
					创建节点时 先有父节点,再有子节点

				 Zookeeper命令行操作
					1.		ls  /	查看当前Zookeeper中包含的内容
					2.		ls2 /	查看当前节点数据并能看见更新次数等数据
					3.		create  /zk "test" 创建节点
					4.		get  /zk		获取zk节点的内容
					5.		set /zk "zkbank"	对zk关联的字符串进行修改
					6.		delete /zk 		删除节点 zk 
					7.		quit	退出客户端
					8.		help	帮助命令

			Zookeeper 实现分布式锁
				项目中使用到分布式锁的场景
					需要生成订单号   ----------唯一不允许重复(分布式场景下出现订单号重复)
					使用UUID    时间戳+业务id		  自增长
					幂等性: 不允许 重复

					共享全局变量 static 产生 线程安全问题

					单点系统   				订单号唯一   使用同步代码块 或者 Lock锁机制
					
					分布式集群环境			高并发情况下,时间 和业务逻辑id 可能相同 , 会出现订单号重复的问题
								大公司的解决方法 ① 订单号提前生成,存放到Redis中,其它服务器直接从redis中获取订单号信息
												 ② 使用分布式锁   多个JVM保证唯一
														数据库		谁拿到锁,其他人等着,直到锁被释放    容易产生死锁
														缓存(redis)	 setnx   非常复杂 也有可能产生 死锁	
														ZK	推荐使用	zk临时节点 + 事件通知 实现分布式锁 		
							zk 实现分布式锁 步骤
								1. 使用ZK 创建临时节点 "path"
								2. 谁创建节点成功,就拿到锁,就能生成订单号
								3. 其它等待锁释放之后
								 
							负载均衡轮询机制取模算法
								服务位置  =  调用次数	%	服务集群总数 
								 
							redis 选举    创建临时节点,谁创建成功谁就是Master




				Zookeeper 四字命令		功能描述
				
					conf				输出性格服务配置的详细信息
					cons				列出所有连接到服务器的客户端的完全的连接、会话的详细信息.包括
										"接受 发送"的包数量 会话id 操作延迟 最后执行的操作等等信息
					
					dump				列出未经处理的会话和临时节点
					envi				输出关于服务环境的详细信息 (区别于conf命令)			
					reqs				列出未经处理的请求
					ruok				测试服务是否处于正确状态,如果是,返回"imok",否则不做任何响应.
					stat				输出关于性能和连接的客户端的列表
					wchs				累成服务器watch的详细信息
					wchc				通过session列出服务器watch的详细信息,它的输出是一个与watch相关的会话的列表
					wchp				通过路径列出服务器watch的详细信息,它的输出是一个与session相关的路径


				单点系统    会产生代码冲突  通常是小团队开发   MVC
				互联网公司  特征 开发人员多 高并发 高可用 

				分布式开发	将一个项目拆分成多个子项目,订单系统 支付系统 会员系统... RPC远程调用,项目之间互不影响

				SOA 面向服务	将项目拆分多个子服务  将传统项目业务逻辑封装成接口,暴露给其它服务调用  Http + xml报文
				
























