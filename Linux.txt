linux备份  2018年12月23日16:05:17
Linux达人养成计划
	Linux发展史
	Minix 发明人 Andrew S.Tanenbaum教授为了给同学上课买了UNIX操作系统，参考写了 Minix，2000年开源
	Linus Torvalds 芬兰大三学生，结合Minix发布自己的Linux
	
	内核版本; 内核官网 www.kernel.org   2.6.18 		2：主版本 6:次版本 18：末版本
	发行版本：发行厂商Redhat  centos Debian Ubuntu 红旗 等 fedoro个人版功能强大
	
	开源软件：Apache NGINX PHP MySQL MongoDB Ruby Python
	使用自由：绝大多数开源软件免费
	研究自由：可以获得软件源代码
	散布改良自由：可以自由传播 改良甚至销售
	
	应用场景：基于Linux的企业服务器  www.necraft.com 国外网站分析竞争对手 Internet Data Mining 查看后台服务器 what’s that site running
			  嵌入式应用：SSHd 远程安全管理
	
	
	Linux 与windows的不同
	Linux严格区分大小写、 所有内容以文件形式保存,包括硬件 windows下的程序不能直接在Linux中安装运行
	不靠扩展名区分文件类型 压缩包：*.gz *.bz2 *.tar.bz2 8.tgz
					 二进制软件包：.rpm
					 网页文件：*.html *.php
					 脚本文件：*.sh
					 配置文件：*.conf				 
					 
	字符界面的优势
		占用系统资源更少、减少出错被攻击的可能、安全高大上

	VMware简介
		一个虚拟PC的软件，模拟一台新的PC
		主要特点：不需要分区使用两种以上操作系统 本机可以和虚拟机网络通信 可以设定并随时修改虚拟机操作系统的硬件环境
		建议的VMware配置：CPU 1GHz 内存 1GB 硬盘 8GB以上
		VMware 软件删除不干净可以使用 VMware_Install_Cleaner
		
		网络连接：
			桥接：使用本地或者无线网卡进行通信，缺点占用物理机的网段IP   能跟物理机和局域网其它物理机通信
			NAT:  使用VMware Network Adapter8虚拟网卡进行通信  只能跟物理机通信  可以上网
	  HOST-only:  使用VMware Network Adapter8虚拟网卡进行通信  只能跟物理机通信  只能本机使用
	 
	 快照：新系统安装做，可以还原 
	 克隆：虚拟机-- 管理-- 克隆
	 
	 硬件设备文件名： / 根目录 dev :放设备文件
	 硬件			设备文件名
	 IDE硬盘		/dev/hd[a-d] hda1 代表IDE硬盘接口
	 SCSI/SATA硬盘	/dev/sd[a-p] sda1 硬盘接口
	 光驱			/dev/cdrom或 /dev/hdc
	 软盘			/dev/fd[0-1]
	 打印机(25针)	/dev/lp[0-2]
	 打印机(USB)	/dev/usb/lp[0-15]
	 鼠标			/dev/mouse
	 
	 分配盘符 称为 挂载
	 必须分区   / 根分区     swap 分区 交换分区 内存2倍 不超过2GB
	 推荐分区   /boot 启动分区 200M
	 
	 文件系统架构
	 /  
		/boot
		/home
		/etc
			/passwd
			/shadow
			/group
	
	
	总结：
		分区:把硬盘分为小的逻辑分区
		格式化：写入文件系统
		分区设备文件名:给每个分区定义设备文件名
		挂载：给每个分区分配挂载点

	安装：
	开机--鼠标点击进去--F2  -->进入BIOS界面  --Boot --调整启动顺序
	
	安装欢迎界面
	Install or upgrade an existing system 安装或升级现有系统
	install system with basic video driver  安装过程采用基本的显卡驱动
	Rescue installed system   进入系统修复模式
	Boot from local drive 退出安装从硬盘启动
	Memory test  存储介质检测
	
	密码原则
		复杂性 8位字符以上 大小写字母 数字符号 不能英文单词 不能喝用户相关
		易记忆性
		时效性
		
	Linux 常用命令
		命令基本格式
			命令格式 ： 命令 [选项] [参数]  注意个别命令不遵守此格式，当有多个选项时，可以写 在一起简化选项与完整选项  -a等于 --all
			
			ls 查询目录中内容  -a 显示所有文件 -l 显示详细信息 -d 查看目录属性 -h 显示文件大小 -i 显示inode
			ls -l  别名 ll
			
			权限  -rw-r--r--. 1 root root 1208 1月 12 18:18 anaconda-ks.cfg      r读   w写   x 执行
			-文件类型(-文件 d目录| 软链接，快捷方式) 其它类型：属于系统文件，普通用户不需要懂(块设备文件 字符设备文件 套接字文件 管道文件)
			rw-	所有者		r--	所属组	r-- 其它人的权限   关系说的是：用户和文件的关系
			.代表ACL权限  1 引用计数  1208 文件大小字节 ls -lh人性化显示
			第一个root 文件所有者  第二个root 所属组    1月 12 18:18 最后一次修改时间
		
		文件处理命令
			目录处理命令
				建立目录 mkdir -p [目录名]  -p 递归创建  原意为 make directories 
				切换目录 cd [目录]  change directory
							cd /usr   +Tab 两下 列出 usr目录下的文件
							user	+Tab 两下   列出user开头的命令
				查询当前所在目录: pwd  print working directory
				删除目录：rmdir [目录名]  remove empty directories 只能删除空目录
						  rm -rf [文件或目录] remove  -r 删除目录 -f 强制
			文件处理命令
				复制命令：cp [选项] [原文件/目录] [目标目录]  copy
						-r 复制目录 -p连带文件属性复制    -d若源文件是链接文件，复制链接属性  -a 相当于-pdr
				剪切或改名命令：mv[原文件或目录][目标目录]    move  改名字必须在同一个目录下
				
				常见目录作用：
				/根目录
				/bin 命令保存目录
				/boot 启动目录，启动相关文件
				/dev 设备文件保存目录
				/etc 配置文件保存目录
				/home 普通用户的家目录
				/lib 系统库保存目录
				/mnt  系统挂载目录
				/media 挂载目录
				/proc /sys 目录不能直接操作，这两个保存的是内存的过载点
				/usr  系统软件资源目录  usr/bin/系统命令(普通用户)  usr/sbin/系统命令(超级用户)
				/var  系统相关文档内容
				
			链接命令 ln
			ln -s [原文件][ 目标文件]  link  功能描述 生成链接文件  选项： -s 创建软链接
			硬链接特征：
				1)	拥有相同的i节点和存储block块，看做同一个文件,删除一个,另外一个也能使用
				2)	可通过i节点识别
				3)	不能跨分区
				4)	不能针对目录使用
			
			软链接特征：  写软连接 原文件一定要写成 绝对路径
				1)	类似Windows快捷方式
				2)	软链接拥有自己的I节点和Block块，但是数据块中只保存原文件的文件名和I节点号，并没有实际的文件数据
				3)	Lrwxrwxrwx   L软链接  软链接文件权限为rwxrwxrwx，真实权限要看原文件的权限
				4)	修改任意文件,另外一个都改变
				5)	删除原文件,软链接不能使用
				
		文件搜索命令
			文件搜索命令locate  特点：搜索速度比find快 ,只可以安装文件名搜索
				locate 文件名  在后台数据库(/var/lib/mlocate 更新 频率每天，可以强制更新updatedb)中按文件名搜索，搜索速度更快
					/etc/updatedb.conf 配置文件
						PRUNE_BIND_MOUNTS="yes"		//开启搜索限制
						PRUNEFS=					//搜索时不搜索的文件系统
						PRUNENAMES=					//不搜索的文件类型
						PRUNEPATHS=					//不搜索的路径	
						
			命令搜索命令whereis 与which
				whereis 命令名 搜索命令所在路径及帮助文档所在位置 选项：-b 只查找可执行文件   -m 只查找帮助文件
				which 文件名  搜索命令所在路径及别名
					有些命令找不到，因为它是Linux的shell命令 如cd
					echo $PATH 系统环境存在,故ls 可以直接使用
					
			文件搜索命令find   特点：根目录下遍历一遍
				find  [搜索范围] [搜索条件]  搜索文件
					find  / -name install.log  避免大范围搜索，非常消耗系统资源
					通配符 *匹配任意内容 ？匹配任意一个字符 []匹配括号里任意一个字符
					find /root -iname install.log 不区分大小写
					find /root  -user  root    按照所有者搜索
					find /root -nouser      查找没有所有者的文件
						①sys proc 中由内核产生的文件可能没有所有者
						②外来文件 如U盘来的文件
					find /var/log/ -mtime +10  查找10天前修改的文件
					-10 10天内修改文件   10 当天修改的文件   +10  10天钱修改的文件
					atime 文件访问时间 ctime 改变文件属性 mtime 修改文件内容 
					find  .	 -size 25k   查找文件大小为25KB的文件
					find  .	 -inum 262422  查找i节点是262422的文件
					
					find /etc/ -size +20k -a -size -50k   查找/etc/目录下,大于29KB并且小于50KB的文件
						-a  and  逻辑与,两个条件都满足   -o  or 逻辑或,两个条件满足一个即可
					find /etc -size +20k -a -size -50k -exec ls -lh {} \;  查找/etc/目录下,大于29KB并且小于50KB的文件,并显示详细信息
						-exec /-ok 命令{}\;  对搜索结果执行操作
					
			字符串搜索命令grep
				grep [选项]  字符串 文件名  在文件中匹配符合条件的字符串
						选项： -i  忽略大小写  -v 排除指定字符串
				
			find命令和grep命令的区别
			find命令:在系统中搜索符合条件的文件名,如果需要匹配,使用通配符匹配,通配符是完全匹配
			grep命令:在文件中搜索符合条件的字符串,如果需要匹配,使用正则表达式进行匹配,正则表达式包含匹配
			
		帮助命令
			man   man  命令  获取指定命令的帮助
				  man -f 命令  查看命令拥有哪个级别的帮助 相当于 whatis 命令
				  man -k 命令 相当于apropos 命令   查看和命令相关的所有帮助
				man的级别
				1:	查看命令的帮助
				2:	查看可被内核调用的函数的帮助
				3:	查看函数和函数库的帮助
				4:	查看特殊文件的帮助(主要是/dev目录下的文件)
				5:	查看配置文件的帮助
				6:	查看游戏的帮助
				7:	查看其它杂项的帮助
				8:	查看系统管理员可用命令的帮助
				9:	查看和内核相关文件的帮助
			
			选项帮助
				命令 --help  获取命令选项的帮助 如ls -help
			shell内部命令帮助
				help shell内部命令  获取shell内部命令的帮助 如whereis cd  help cd 
			info 命令   详细命令帮助	
				   -回车  进入子帮助页面(带有* 标记)  -u 进入上层页面
				   -n 进入下一个帮助小节 -p 机内上一个帮助小节 -p 退出 
				   
		压缩和解压命令
			常用压缩个 .zip .gz .bz2    (.tar.gz  tar.bz2 最常见) 
				zip 压缩文件名 源文件  			压缩文件  加扩展名为了方便记忆
				zip -r 压缩文件名 源目录  		压缩目录
				unzip 压缩文件名
				
				gzip 源文件  压缩为.gz格式的压缩文件,源文件会消失
				gzip -c 源文件 > 压缩文件  压缩为.gz 格式,源文件保留
				gzip -r 目录    压缩目录下的所有子文件,但是不能压缩目录
				gzip -d 压缩文件   解压缩
				gunzip 压缩文件    解压缩文件
				
				bzip2 源文件   压缩为.bz2格式,不保留源文件
				bzip2 -k 源文件   压缩之后保留源文件   不能压缩目录
				bzip2 -d 压缩文件  解压缩 ,-k 保留压缩文件
				

				打包命令tar
				tar -cvf 打包文件名 源文件 如 tar -cvf long.tar long 
					选项：-c打包 -v显示过程 -f 指定打包后的文件名
				tar -xvf 打包文件名    解压包	tar -cvf long.tar 
				
				.tar.gz格式是先打包为.tar 格式,再压缩为.gz格式
				tar -zcvf 压缩包名.tar.gz 源文件    压缩为.tar.gz格式
				tar -zxvf 压缩包名.tar.gz 			解压缩.tar.gz
				tar -jcvf 压缩包名.tar.bz2 源文件    压缩为.tar.bz2格式
				tar -jxvf 压缩包名.tar.bz2 			解压缩.tar.bz2
				tar -jcvf jp.tar.bz2  -C /tmp/  解压缩到指定/tmp/目录下
				tar -zcvf /tmp/test.tar.gz   jp   anaconda.cfg  解压多个文件(jp anaconda.cfg)到指定目录/tmp/下
				tar -ztvf test.tar.gz         只查看压缩包里有什么,不解压
				
		关机和重启
			shutdown [选项] 时间  
				选项: -c取消前一个关机命令  -h 关机 -r 重启
			shutdown -r 05:30 &  把操作放到后台,不占用控制台 
			halt   poweroff  init0    关机  不安全，不会正确保存服务
			reboot  比较安全 init6	尽量不用用			重启
			logout  退出登录
			
			系统运行级别  0关机 1 单用户 2 不完全多用户，不含NFS服务  3 完全多用户
			4未分配 5 图形界面 6 重启
			cat /etc/inittab    修改系统默认运行级别  id:3:initdefault:
			runlevel   查询系统运行级别
			
		其它命令
			挂载命令	
				mount  查询系统中已经挂载的设备
				mount -a  依据配置文件/etc/fstab的内容，自动挂载
				mount [-t文件系统][-o特殊选项] 设备文件名 挂载点(已经存在的空白盘符)     挂载命令格式
				选项：-t 文件系统:加入文件系统类型来指定挂载的 类型,可以是ext3、ext4、iso9660等文件系统
					  -o 特殊选项:可以指定挂载的额外选项
					example:
						cd  /home           切换到home目录
						vi hello.sh			编辑hello
						chmod 755 hello.sh	给文件授权
						./hello.sh			本目录执行文件
						mount -o remount,exec /home   重新挂载
						
						挂载光盘
						mkdir /mnt/cdrom/       建立挂载点  -t iso9660 也可以省略
						mount -t iso9660  /dev/cdrom   /mnt/cdrom/   挂载光盘 
						mount   /dev/sr0    /mnt/cdrom/    建议使用
						卸载命令
						umount 设备文件名或挂载点  如 umount /mnt/cdrom     必须卸载
						
						挂载U 盘
						fdisk -l  查看系统已经识别的硬盘(U 盘)
						mount -t vfat /dev/sdb1 /mnt/usb/  挂载U盘   
							注意:Linux默认是不支持NTFS文件系统的 ,可以下载ntfs.3g 下载安装就可以支持,但是只能读
							vfat指的是Windows中的 fat32位系统
							
			用户登录查看和用户交互命令
				W 用户名    查看用户登录信息
					命令输出: 
					User   用户名   TTY  登陆终端   FROM  从哪个IP地址登陆  LOGIN@   登陆时间
					IDLE   用户闲置时间  WHAT 当前正在运行的命令  PCPU 当前进程所占用的时间
					JCPU   和该终端连接的所有进程占用的时间(不包括过去，包括当前正在运行的后台作业的时间)
				who  用户名 
					命令输出:
						用户名 登陆终端 登陆时间 来源IP地址
				last  查询当前登陆和过去登陆的用户信息   默认读取/var/log/wtmp文件数据		不能直接vi查看
					命令输出:
						用户名 登陆终端 来源IP地址 登陆时间 退出时间
				lastlog  查询所有用户的最后一次登陆时间   默认读取/var/log/lastlog文件数据
					命令输出:
						用户名 登陆终端 来源IP地址 最后一次登陆时间 


						
Shell 基础		2018年12月29日16:04:55	
		Shell是什么
			Shell是一个命令行解释器,它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至编写一些程序
			Shell还是一个功能相当强大的编程语言,易编写,易调试,灵活性较强.Shell是解释执行的脚步语言,在Shell中可以直接调用Linux系统命令。
		Shell分类
			Bourne Shell : 从1979年前Unix就开始使用Bourne Shell ,它的主文件名为sh    基本淘汰,功能太少
			C Shell :  C Shell 主要在BSD版的Unix系统中使用,其语法和C语言相类似而得名
			彼此不兼容,Bourne家族主要包括sh、ksh、Bash(Linux中标准Shell)、psh、zsh 		C家族主要包括: csh、tcsh
			echo $SHELL     输出:/bin/bash  
			Bsah： Bash与sh兼容,现在使用的Linux就是使用的Bash作为用户的基本Shell
			vi /etc/shells  输出	/bin/sh   /bin/bash   /bin/tcsh   /bin/csh    /sbin/nologin
			
			echo 输出命令
			echo [选项 ][输出内容]  
				选项：-e  支持反斜线控制的字符转换
				\a 输出警告  \b 退格键,向左删除键  \n 换行符  \r  回车键  \t 制表符 tab键 
				\v 垂直制表符  \Onnn 按照八进制ASCII码表输出字符  \xhh 按照十六进制ASCII码表输出字符
		第一个脚本
			vi hello.sh
			#!/bin/bash      不能省略
			# The first program
			echo -e "\e[1;34m 天上掉下个林妹妹 \e[0m"    
					\e[1;34m 开启颜色显示			\e[0m 关闭颜色显示   
			
			脚本执行
			① 赋予执行权限,直接运行	chmod 755 hello.sh      ./hello.sh 
			② 通过Bash调用执行脚本		bash hello.sh 
			
			Bashde基本功能
				①命令别名与快捷键
					alias   alias 别名 ='原命令'  这种别名,重启就会消失
					vi ~/.bashrc   写入环境变量配置文件
					unalias 别名   删除别名
					source .bashrc  直接生效 别名,不用重启登录
				
				命令生效的顺序
					第一顺位执行用 绝对路径或相对路径执行的命令  第二顺位执行别名  第三顺位执行Bash 的内部命令
					第四顺位执行按照$PATH环境变量定义的目录查询顺序找到的第一个命令
					
					常用快捷键
				Ctrl + c 强制终止当前命令  Ctrl + l  清屏 	Ctrl + a  光标移动到命令行首    Ctrl + e 光标移动到命令行尾
				Ctrl + u 从光标所在位置删除到行首		Ctrl + z 把命令放入到后台			Ctrl + r 在历史命令中搜
				
				②历史命令
					history[选项][历史命令保存文件]   -c 清空历史命令   -w 把缓存中的历史命令希尔历史命令保存文件~/.bash_history
					历史命令默认保存1000条,可以在环境变量配置文件/etc/profile中进行修改  HISTSIZE=1000
					
					历史命令调用:
						使用上下箭头调用之前的历史命令 
						使用 !n 重复执行第n条历史命令
						使用 !! 重复执行上一条命令
						使用 !字符串 重复执行最后一条以 该字符串开头的命令
					
					命令与文件补全
						在Bash中,命令与文件的补全是非常方便与常用的功能,我们只要在输入命令或文件时,按Tab 键 就会自动进行补全
					
				③输出重定向
					标准输入输出	设备  设备文件名	文件描述 	类型
									键盘	/dev/stdin		0		标准输入输出
									显示器	/dev/sdtout		1		标准输出
									显示器	/dev/sdterr		2		标准错误输出
					
					类型					符号			作用
					标准输出定向			命令 > 文件		以覆盖的方式把命令正确输出到指定的文件或设备中
											命令 >> 文件	以追加的方式把命令正确输出到指定的文件或设备中
					标准错误输出重定向		命令 > 文件		以覆盖的方式把命令的错误输出到指定的文件或设备中
											命令 >> 文件	以追加的方式把命令的错误输出到指定的文件或设备中
					正确错误输出同时保存	命令 >>文件 2>&1 以追加的方式把正确错误输出都保存到同一个文件中
											命令& >>文件	以追加的方式把正确错误输出都保存到同一个文件中
											命令 >>文件1  2>>文件2 把正确输出追加到文件1,把错误的输出追加到文件2中
											
					输入重定向  wc [选项][文件名]		 -c 统计字节数   -w 统计单词数  -l 统计行数	
								命令 < 文件  把文件作为命令的输入
								命令 << 标识符 标识符把标识符之间的内容作为命令的输入
				④多命令顺序执行
					多命令执行符		格式			作用
						;  			命令1 ;命令2 		多个命令顺序执行,命令之间没有逻辑联系
						&&			命令2&&命令2		逻辑与,命令1执行正确,命令2才会执行
						||			命令1||命令2		逻辑或,命令1执行不正确,命令2执行,否则命令2不执行
					管道符
						命令1 | 命令2   命令1的正确输出作为命令2的操作对象
							ll -a /etc/ | more 查询etc目录下的文件分屏显示
						netstat -an   查看系统中的所有网络连接
						netstat -an | grep ESTABLISHED | wc -l  查看有多少个正在连接服务器的客户端
						
				⑤Shell中特殊符号
					通配符			作用
					?				匹配一个任意字符
					*				匹配0或者任意多个字符
					[]				匹配括号中任意一个字符
					[-]				匹配任意一个字符 -代表范围
				    [^]				逻辑非 匹配不是括号中的内容的一个字符
					其它特殊符号	
					''				单引号,在单引号中所有的特殊符号,如"$"和"`"(反引号)都没有特殊含义
					""				双引号,在双引号中特殊符号都没有特殊含义,但是"$"、"`"、"\"是例外,调用变量的值,引用命令,转义符
					``				反引号,反引号括起来的内容是系统命令,在Bash中会先执行它。和$()作用一样,因为容易看错,推荐使用$()				
					$()				引用系统命令
					#				在Shell脚本中,#开头的行代表注释
					$				用于调用变量的值,如需要调用变量name的值时,需要用$name的方法得到变量的值
					\				转义符,跟在\之后的特殊符号将失去特殊含义,变为普通字符.如\$ 将输出 "$"符号,而不是当做是变量的引用

						
Linux软件安装管理   2018年12月30日16:05:32
			
	软件包管理简介
		软件包分类
			源码包  脚本安装包
			二进制包：RPM包、系统默认包
			
			源码包优点: 开源有足够能力可以修改源代码 可以自由选择所需的功能 
						软件是编译安装,所有更适合自己的系统更稳定高效 卸载方便
				  缺点: 安装过程步骤较多,尤其安装较大的软件集合时(如LAMP环境搭建),容易出现拼写错误
						编译过程时间较长,安装比二进制安装时间长
						安装过程保存新手很难解决
			二进制包优点：包管理系统简单,只通过几个简单命令就可以实现包的安装、升级、查询和卸载
						  安装速度比源码包快很多
					缺点:经过编译,不能再看到源代码  功能选择不如源代码包灵活  依赖性
			脚本安装包	:把复杂的安装过程写成程序脚本,初学者可以执行程序脚本实现一键安装,时间安装过程还是源码包和二进制包
					优点: 安装简单、快捷 
					缺点: 完全丧失了自定义性
			
	rpm命令管理
			RPM包命名规则
				来源: 系统光盘的Packages包中
				命名原则 httpd-2.2.15-15.el6.centos.1.i686.rpm 
					httpd软件包名  -2.2.15 软件版本  -15 软件发布次数 .el6.centos 适合Linux平台
					.1.i686 适合的硬件平台 .rpm 包扩展名
				RPM包依赖性
					树形依赖 a -> b -> c 
					环形依赖 a -> b -> c ->a 
					模块依赖 查询网址: www.rpmfind.net   
						.so.2  以.so.数字结尾的  叫 库依赖
			安装命令
				包全名: 操作的包是没有安装的软件包时,使用包全名.而且要注意路径
				包名: 操作已经安装的软件包时,使用包名是搜索/var/lib/rpm/中的数据库
				rpm -ivh 包全名  RPM安装  必须进入packages包,或者使用绝对路径
				选项：-i(install)安装 -v(verbose)显示详细信息  -h(hash)显示进度  --nodeps不检测依赖性
				
			升级与卸载
				rpm -Uvh 包全名  RPM包升级  -U upgrade  升级 
				rpm -e 包名   卸载   e erase  卸载 
				
			RPM包查询
				rpm -q  包名   查询是否安装   -q 查询 query
				rpm -qa  查询所有已经安装的RPM包  -a  all  所有   如 rpm -qa | grep httpd 
				rpm -qi 包名   查询软件包详细信息   -i information 查询软件信息  -p 查询未安装包信息  -l 列表
				rpm -qf 系统文件名   查询系统文件属于哪个RPM包   -f  file 
				rpm -qR 包名  查询软件包的依赖性   -R requires依赖性   -p 查询未安装包信息
				
				默认安装位置
				/etc/ 配置文件   /uer/bin/可执行命令   /usr/lib/函数库   /usr/share/doc/软件手册  usr/share/man/帮助文件 
				
			RPM包校验
				rpm -V  已经安装的包名   -v verify 
				
				rpm  -V httpd 
				S.5....T. c /etc/httpd/conf/httpd.conf
				验证内容信息:
				S  文件大小是否改变
				M  文件的类型或文件的权限是否更改
				5  文件MD5校验和是否改变,即文件内容是否改变
				D  设备的主从代码是否改变
				L  文件路径是否改变
				U  文件的属主是否改变 
				G  文件的属组是否改变
				T  文件的修改时间是否改变
				文件类型 
					c配置文件config file  d普通文件documentation  g鬼文件ghost file,不应该包含在RPM包   
					L授权文件license file  r描述文件read me 
					
				rpm2cpio 包全名 | cpio -idv .文件绝对路径  RPM包中文件提取	
					rpm2cpio  将rpm包转换为cpio 格式的命令 
					cpio 是一个标准工具,它用于创建软件档案文件和从档案文件中提取文件
					cpio 选项 < []文件[设备]  提取文件标准格式	  -i  copy-in模式,还原   -d 还原时自动新建目录    -v 显示还原过程
					
	yum在线管理
		     将所有软件包放在官方服务器上,当进行yum在线安装时,可以自动解决依赖性问题
			 redhat的yum 在线安装需要付费
			 
			 yum 源文件
				vi /etc/yum.repos.d/CentOS-Base.repo 
				[base]  容器名称,一定放在[] 中
				name  容器说明,可以自己随便写
				mirrorlist 镜像站点,这个可以注释掉
				baseurl  我们的yum源服务器的地址,默认CentOS官方的yum,也可以改成自己喜欢的yum
				enabled  此容器是否生效,不写或者enabled=1都是生效,0 不生效
				gpgcheck 如1指 RPM的数字证书生效,0 不生效
				gpgkey  数字证书的公钥保存位置,不用修改
				
				
			 光盘搭建yum源
				1.挂载光盘
				mkdir /mnt/cdrom  建立挂载点
				mount /dev/cdrom  /mnt/cdrom/ 挂载光盘
				2.使网络yum失效
				cd /etc/yum/repos.d/   进入yum源目录
				mv CentOS-Base.repo  CentOS-Base.repo.bak 修改yum源文件后缀名,使其失效
				3.使光盘yum源生效
				vim CentOS-Media.repo 修改 baseurl=file:///mnt/cdroom 地址为自己挂载光盘地址
					# 注释掉下面两行file目录   enabled=0 修改为 enabled= 1 
				
				
			 yum命令
				
				常用yum命令
					yum list  查看yum源有哪些软件可以安装
					yum search 关键字  搜索服务器上所有和关键字相关的包
					yum -y  install 包名    install 安装  -y 自动回答yes  
						如 yum -y install gcc 编译器
					yum -y update 包名    升级 	
					yum -y remove 包名     卸载 
					
					yum grouplist  列出所有的可用组列表
					yum groupinstall 软件组名  安装指定软件组
					yum groupremove 软件名   卸载指定软件组
	源码包管理
			安装位置不同带来的影响
			RPM包安装的服务可以使用系统服务管理命令 来管理 
			如Apache的启动方法是：/etc/rc.d/init.d/httpd start
			源码包安装的服务不能被服务管理命令 管理,因为没有安装到默认路径中,只能绝对路径进行服务管理
			/usr/local/apache2/bin/apachectl start 
			
			安装源码包
			1.安装准备  安装C语言编译器  下载源码包  http://mirror.bit.edu.cn/apache/httpd/
			2.安装注意事项 
				源代码保存位置: /esr/local/src/
				软件安装位置: /usr/local/ 
				如何确定安装过程保存:
				      安装过程停止  并出现error 、warning 或no的提示
			3. 源码包安装过程
				下载源码包  解压下载的源码包 进入解压缩目录
				cd httpd-2.2.9
				./configure 软件配置与检查
					定义需要的功能选项  检测系统环境是否符合安装要求 把定义好的功能选项和检测系统环境的信息都写入Makefile文件,用于后续的编辑
				./configure  --prefix=/usr/local/apache2
				make   编译     make clean 报错之后,执行清除缓存
				make install  编译安装
				/usr/local/apache2/bin/apachectl start  启动 
				
				源码包目录下 有个INSTALL 文件  vi INSTALL 就可以看到安装步骤
				
			4. 卸载源码包   直接删除安装目录,不会遗留任何垃圾文件	
					
	脚本安装包
			1.准备工作
				关闭RPM包安装的httpd 和Mysql  保证yum 源正常使用 关闭SELinux和防火墙
				vi /etc/selinux/config 打开之后把默认的改为 SELINUX=disabled
			2.下载脚本一键安装包    https://lnmp.org/install.html ,使用WinSCP 传输到虚拟机
			wget -c http://soft.vpser.net/lnmp.lnmp1.0-full.tar.gz&& tar zxvf lnmp1.0-full.tar.gz && cd lnmp1.0-full && ./centos.sh 



Linux服务管理
	简介与分类
		系统运行级别 
			系统运行级别  0关机 1 单用户 2 不完全多用户，不含NFS服务  3 完全多用户
			4未分配 5 图形界面 6 重启
			修改运行级别:  vim /etc/inittab  里 id:3:inirdefault   系统开机直接进入哪个运行级别
			
		服务的分类
			Linux服务-----  RPM包默认安装的服务 -----   独立的服务
												-----	基于xinetd服务
					 ----	源码包安装的服务
			服务启动: 在当前系统中让服务运行,并提供功能
			服务自启动: 让服务在系统开机或者重启之后,随之系统启动而自动启动	

			查询已经安装的服务
				chkconfig --list  查看服务自启动状态,可以看到所有RPM包安装的服务
				源码包安装的服务位置一般是 /usr/local/下	
			
		服务与端口
			ps aux   查看系统服务状态信息
			netstat -tlunp  列出系统中所有已经启动的服务
				-t 列出tcp数据  -u 列出udp数据   -l 列出正在监听的网络服务(不包含已经连接的网络服务) 
				-n 用端口号来显示服务,而不是服务名   -p 列出服务的进程ID(PID) -a  可以看到正在连接的端口
					
			
			
	RPM包服务管理
			源码包安装的服务位置一般是 /usr/local/下 usr Unix System Resource ,即Unix系统资源的缩写
			RPM默认安装位置
				/etc/init.d/ :启动脚本位置
				/etc/sysconfig/ :初始化环境配置文件位置
				/etc/ :配置文件位置
				/etc/xinetd.conf :xinetd配置文件
				/etc/xinetd.d/ :基于xinetd服务的启动脚本
				/var/lib/  :服务产生的数据存放在这里
				/var/log/  :日志
			独立服务启动：
				/etc/init.d/独立服务名          start | stop | status | restart
				service 独立服务名 				start | stop | status | restart
				service 只能使用RPM安装的服务,它是Redhat 系列特有的
				
			独立服务自启动
				chkconfig  [ --level运行级别 ][ 独立服务名 ][ on|off ] 
				①修改/etc/rc.d/rc.local文件    (登录之前最后启动服务) 里面touch /var/lock/subsys/local 
					推荐使用 															/etc/init.d/httpd start 
				
				chkconfig --list | grep httpd 
				②chkconfig --level 2345 httpd on  修改httpd服务的默认是否自启动状态
				③使用ntsysv 命令管理自启动   
				②③是同一种方法
				
			xinnetd服务启动
				①安装xinetd     yum -y install xinetd
				②xinetd服务的启动    rsync服务是Linux和Linux之间进行数据同步的服务
					vi /etc/xinetd.d/rsync  disabled   = yes 改为 disabled   = no 然后重启xinetd服务 service xinetd restart
					service rsync			服务的名称为Telnet  
					{
						flags  = REUSE	标志为REUSE,设定TCP/IP socket 可重用
						socket_type = stream 使用TCP协议数据包
						wait   = no 		允许多个连接同时连接
						user   = root		启动服务的用户为root
						server = /usr/bin/rsync 	 服务的启动程序
						log_on_failure += USERID	 登录失败后,记录用户的ID
						disabled   = no              服务不启动
					}
				自启动xinetd服务    
					不支持service命令启动,只有独立的服务才有运行级别,基于xinetd的服务没有运行级别 
					 chkconfig rsync off 不仅开机不自启动,也会停掉当前服务
					① chkconfig rsync  on   开机自启,会启动服务 ,启动服务,也会开机自启动
					② ntsysv  把[变为* 
				
				
	源码包服务管理
			源码包服务的启动	使用绝对路径,调用启动脚本来启动.不同源码包的启动脚本不同,可以查看源码包的安装说明,查看启动脚本的方法
				usr/local/apache2/bin/apachectl start | stop 
			源码包服务的自启动  vi /etc/rc.d/rc/local   加入/usr/local/apache2/bin/apachectl start 
			让源码包的服务被服务管理命令识别 (让源码包的Apache服务能被service命令管理启动)
				ln -s //usr/local/apache2/bin/apachectl   /etc/init.d/apache    软链接 
			
			让源码包的Apache 服务能够被chkconfig与ntsysv命令管理自启动
				vi /etc/init.d/apache
				# chkconfig: 35 86 76
				#指定httpd脚本可以被chkconfig命令管理,格式是 chkconfig: 运行级别 启动顺序 关闭顺序
				# description: source package Apache
				#说明,内容随意
				
				执行 chkconfig --add apache   把源码包apache 加入chkconfig命令
			
	服务管理总结
				xwind 做脑图
				文件包含:
				Linux服务治理.png
				Linux服务列表.pdf


Linux网络管理  2019年1月2日16:20:46
	网络基础
		ISO/OSI七层模型简介
			ISO 国际标准化组织  OSI 开放系统互联模型  IOS 苹果操作系统
			网络中IOS指的是 思科公司为其网络设备开发的操作系统
			
			层			数据单位				作用
			应用层  	APDU					用户接口
			表示层  	PPDU					数据的表现形式、特定功能实现 如 加密
			会话层  	SPDU					对应用会话的管理、同步
			传输层  	TPDU(传输协议数据单元)	传输前 错误检测、流控 可靠与不可靠的传输	
			网络层  	报文					提供逻辑地址、选路
			数据链路层  帧						成帧、用MAC地址访问媒介、错误检测与修正
			物理层		比特					设备之间的比特流的传输、物理接口、电器特性
																		
																
			MAC地址负责局域网通信 IP地址负责外网通信
			
		TCP/IP四层模型
			应用层		对应OSI参考模型的高层,为用户提供各种所需的服务 FTP Telnet DNS SMTP
			传输层		对应OSI参考模型的传输层,为应用层实体提供端到端的通信功能,保证数据包的顺序传送及数据的完整性
						两个主要协议: 传输控制协议(TCP) 和用户数据报协议(UDP)
			网络互联层	对应OSI参考模型的网路层,主要解决主机到主机的通信问题,所包含的协议涉及数据包在整个网络上的逻辑传输
						主要三个协议: 网际协议IP  互联网组管理协议 IGMP 和互联网控制报文协议 ICMP
			网络接口层  对应OSI参考模型的物理层和数据链路层,负责监事数据在主机和网络之间的交换
						TCP/IP本身并未定义该层的协议,参与互联的各网络使用资金的物理层和数据链路层协议,
						然后与TCP/IP的网络接入层进行连接 地址解析协议(ARP)在此层
				两种模型比较
					共同点: 都采用层次结构的概念  都能提供面向连接和无连接两种通信服务机制
					不同点: 7 4   对TCP/IP可靠性要求更高  OSI模型是在协议开发前设计的具有通用性,TCP/IP先有协议后有模型,不适用非TCP/IP
							OSI模型只是理论模型,没有成熟产品,TCP/IP已经是国际标准
		
		IP地址详解
			IP包头
				IPV4协议：
					每一行32位,一共20字节  ，因为字节数不固定,所有每次接受到都需要先判断字节数,效率低，才会有固定包头长度IPv6协议
					版本位 4位 头部长度4 优先级和服务类型8位 总长度16
					标识16	标志3位 片偏移13位
					生存时间8位  协议8位 头部校验和16位
					源IP地址32位
					目的IP地址32位
					选项如果有 
					数据
					
			IP地址分类
				网络类别  最大网路数    IP地址范围						最大主机数			私有IP地址范围
				A 			126 =2^7-2  1.0.0.1--126.255.255.255		2^24-2				10.0.0.0--10.255.255.255
				B 			16384=2^14	128.0.0.0--191.255.255.255		2^16-2				172.16.0.0--172.31.255.255
				C 			2097152=2^21   192.0.0.0--223.255.255.255	2^8-2				192.168.0.0--192.168.255.255
				说明:
				1.0.0.1		-代表当前网络的本身,不能分配		126.255.255.255		- 代表当前网络的广播地址
				A  1.0.0.1 中 第一位代表网段  后面三位代表同一网段中的不同主机  ,它们之间通信不需要通过路由器,使用交换机就可以
				B  128.0.0.0 中前两位数代表同一个网段,后面两位代表不同主机
				C  192.0.0.0 中前三位数表示同一网段,后一位数代表不同主机
				私有IP免费,公网IP收费,私有IP不能直接和外网通信,需要和公网转换才能通信
				
		子网掩码
			标准子网掩码  255.0.0.0  255.255.0.0  255.255.255.0
			必须和IP地址一起查看,作用是确定 哪一位数变化代表 同一网段 255 哪一位变化代表不同的主机0
			变长子网掩码  IP地址172.16.2.121  子网掩码 255.255.255.0
			
		端口作用
			TCP协议包头  
				每一行32位,20字节
				源端口 16 目的端口16
				序列号32位
				确认号32位
				数据偏移4 保留6 标志6(URG ACK PSH RST SYN FIN) 窗口16
				校验和16 紧急指针16
				选项
				数据
			
			UDP协议包头   消耗资源更少,速度更快
			源端口16 目的端口16
			长度16  校验和16
			数据
			
			常见端口号
				FTP    文件传输协议       20 数据传输 21 登录认证,发送传输命令
				SSH   安全shell协议			22
				telnet 远程登录协议			23   不安全,数据没有加密,禁止开启
				DNS   域名系统				53
				http  超文本传输协议		80
				SMTP 简单邮件传输协议		25  发信
				POP3 邮局协议3代			110  收信
				
			查看本机启用的端口
				netstat -an  		-a  查看所有连接和监听端口  -n 显示IP地址和端口号,不显示域名和服务名
			
		DNS作用  Domain Name System  名称解析
			IP进行通信,IP用数字表示不便于记忆,域名更好记
			把域名和IP进行操作相互转换
			DNS出现之前使用hosts文件 地址:C:\Windows\System32\drivers\etc\hosts 127.0.0.1 localhost
			hosts 做静态IP 和域名对应 优先级高于DNS解析  效能低下 主机维护困难
			DNS优点: 层次性 分布式
			DNS服务作用
				将域名解析为IP地址  客户机向DNS服务器发送域名查询请求,DNS服务器告知客户机Web服务器的IP地址,客户机与Web服务器通信
				
			域名空中结构
					根域							.
					顶级域(组织 国家)		edu  gov 		com 		org mil  cn 	
					二级域							IBM  Microsoft  immortal	
					主机名								www   NEWS
					. 分隔  便于分级管理
			DNS 查询类型
				查询方式	递归查询 一般客户机和服务器之间属于递归查询,若DNS不能解析,会向另外DNS服务发送查询请求
							迭代查询  服务器收到一次迭代查询回复一次,结果不一定指向目标IP与域名的映射关系 ,也可以是其它DNS服务器
				查询内容  正向查询由域名查IP 		反向IP地址查域名
					
			
		网管作用
				又称网间连接器 协议转换器 在网络层以上实现网络互连是最复杂的网络互联设备,仅仅用于两个高层协议不同的网络互连
				即可广域网也可局域网 是一种充当转换重任的服务器或路由器
	Linux网络配置
		IP地址配置
			ifconfig命令临时配置IP地址
				ifconfig 查看配置网络状态 
				ifconfig eth0 192.168.0.200 netmask 255.255.255.0  临时设置eth0网卡的IP地址与子网掩码
			setup工具永久配置ip地址
				红帽专属工具
			修改网络配置文件图形界面配置IP地址
		使用文件配置IP地址
			网卡信息文件  vi /etc/sysconfig/network-scripts/ifcfg-eth0
			TYPE=Ethernet						类型以太网
			PROXY_METHOD=none
			BROWSER_ONLY=no
			BOOTPROTO=dhcp					是否自动获取IP(dhcp nene static)
			DEFROUTE=yes
			IPV4_FAILURE_FATAL=no
			IPV6INIT=yes		I						Pv6启用
			IPV6_AUTOCONF=yes
			IPV6_DEFROUTE=yes
			IPV6_FAILURE_FATAL=no
			IPV6_ADDR_GEN_MODE=stable-privacy
			NAME=ens33
			UUID=93a6d333-368e-4183-b39f-acbfcc98671c   唯一识别码
			DEVICE=ens33								网卡设备名	
			ONBOOT=yes									是否随网络服务启动
			主机名文件
		
		虚拟机网络配置  vi /etc/sysconfig/network 
			NETWORKING=yes
			HOSTNAME=localhost.localdomain
			
			hostname [主机名]  查看 与临时设置主机名命令
		
		DNS配置文件  vi /etc/resolv.conf
		nameserver 202.106.0.20
		search localhost 
		
		虚拟机网络配置步骤
			①配置LinuxIP地址 		setup  修改并配置IP地址
			②启动网卡vi /etc/sysconfig/network-scripts/ifcfg-eth0,把ONBOOT=no 改为yes. 
				service network restart  重启网络服务
			③ 修改UUID(复制的镜像或者虚拟机)
				vi /etc/sysconfig/network-scripts/ifcfg-eth0 删除MAC地址行
				rm -rf /etc/udev/rules.d/70-persistent-net.rules 删除网卡和MAC地址的绑定文件
				重启系统
			④	  设置虚拟机网络连接方式
			⑤		修改桥接网卡	
		
	Linux网络命令 
		Linux网络命令之网络环境查看命令
				ifconfig  查看临时配置网络
				ifdown 网卡设备名  禁用该网卡
				ifup  网卡设备名   启动该网卡
				netstat 选项  查询网络状态
					-t列出TCP协议端口   -u 列出UDP协议端口  -n 使用IP地址和端口号 
					-l 列出在监听状态的网络服务 -a 列出所有的网络连接 -r  网关
				nslookup [主机名或IP]  进行域名与IP地址解析	
					
		Linux网络命令之网络测试命令
			ping [选项] ip 或域名    探测制导IP或域名的网络状况  -c 次数 指定ping包的次数
			telnet [域名或IP] [端口]				远程管理与端口探测命令 telnet 192.168.0.254 80
			traceroute [选项]  IP或域名  路由跟踪命令 -n 使用IP,不使用域名,速度更快 
			wget命令   下载命令   wget http://soft/vpser.net/lnmp1.1.full.tar.gz 
			tcpdump  -i eth0 -nnX port 21   抓包
				选项 -i 指定网卡接口  -nn将数据包中的域名与服务转为IP和端口  -X以十六进制和ASCII码显示数据包内容  port  指定监听的端口
			
	
	远程登录工具
		SSH协议原理   安全外壳协议
			对称加密算法 同一个密钥可以同时用作信息加密和解密
			非对称加密算法  公钥publickey 私钥privatekey
			SSH命令
			ssh 用户名@ip  								远程管理指定Linux服务器
			scp [-r] 用户名@ip:文件路径 本地路径     	下载文件
			scp  [-r] 本地文件 用户名@ip:上传路径		上传文件
			
		Linux远程登录工具SecureCRT
			收费的,但是有破解版,不推荐使用
		XShell和WinSCP文件传输 工具
			WinSCP 文件协议默认选择SFTP

Linux权限管理之基本权限  2019年1月2日10:23:56
	文件基本权限
		- rw-  	  r--     r--     第一位-  文件类型( - 文件 	d 目录  	| 软链接)
		u所有者 g所属组 o其他人
		chmod [选项] 模式 文件名 		 
				选项:	-R 递归
				模式:	[ugoa][+-=] [rwx]
						[mode=421]
					chmod u+x cls.av      给cls.av所有者添加执行权限
					chmod g+w,o+w cls.av	给所属组和其他人添加写的权限
					chmod a=rwx fj.av 	   给所有人赋予读写执行
				权限的数字表示
								r   --  4 	 w   --   2  	x -- 1 
					rwx r-x r-x 
					 7  5   5
		权限对文件的作用
			r:	读取文件的内容  cat more head tail
			w:	编辑、新增、修改文件的内容  vi echo ,但是不包含删除文件
			x:	可执行 
		权限对于目录的作用
			r:	可以查看目录下文件名 ls
			w；	具有修改目录结构的权限,如新建文件和目录,删除此目录下文件和目录,重命名此目录下文件和目录,剪切(touch rm mv cp )
			x:	可以进入目录 cd 
			
			对文件来讲,最高权限是 x执行权限.	对目录来讲,最高权限是w 写 
			对目录来讲权限只有 0 5 rx   7 rwx ,而4 1 6等是没有意义
			
			chown 用户名 文件名 修改文件的所有者
			
			分配文件权限的时,核心原则是:在最小权限下实现要求即可
			
	文件默认权限
			umask 	查看默认权限
				0022 第一个0,文件特殊权限  022 文件默认权限 
			文件默认不能建立为执行文件,只能手工赋予执行权限
			 文件默认最大权限666,默认权限需要换算成字母再相减,建立文件之后的默认权限,为666减去umask值644
			 目录默认最大权限777,默认权限需要换算成字母再相减,建立文件之后的默认权限,为777减去umask值755
			umask 0022		   临时修改
			vi /etc/profile   永久修改
	uid是用户编码，系统用户的编用户码为1到499，人为添加的用户编码为500开始

Linux权限管理之特殊权限  2019年1月1日21:06:53

	ACL权限
		ACL权限简介与开启
		系统文件的权限有三个身份(所有者 所属组 其他人),当有第三个身份的人权限不足时，没有办法访问
		查询分区ACL权限是否开启
			dumpe2fs -h /dev/sda5  dumpe2fs命令是查询指定分区详细文件系统信息的命令    -h 仅显示超级块中信息,而不是显示磁盘块组的详细信息
			临时开启分区ACL权限  mount -o remount , acl /   重新挂载根分区并加入ACL权限
			永久开启分区ACL权限  vi /etc/fstab
									UUID = c2ca6f57-b15c-43ea-bca0-f239083d8bd2 / ext4  dafaults , acl  1  1
								 mount -o remount  / 	  重新挂载文件系统或者重启系统使修改生效
			
		ACL权限查看与设定
			查看ACL命令          getfacl 文件名
			设定ACL权限命令      setfacl 选项 文件名  
						选项:  -m 设定ACL权限 -x 删除指定ACL权限 -b 删除所有ACL权限 -d设定默认ACL权限 
						-k 删除默认ACL权限  -R 递归设定ACL权限
				home文件目录下操作:
				useradd tony
				groupadd stu
				mkdir /av
				chown tony:stu /av
				chmod 770 /av
				useradd lw
				serfacl -m u:lw:rx /av   给用户赋予r-x 权限,使用"u:用户名:权限"格式 
				setfacl -m g:goup2:rwx  /av  给组分配ACL权限  g:组名:权限 格式 
			 
		ACL最大权限与删除
				最大有效权限mask 
					mask用来指定最大有效权限,例如我给用户赋予ACL权限,是需要和mask的权限"相遇" 才能得到用户的真正权限
				setfacl -m m:rx 文件名  设定mask权限为r-w , 使用"m:权限" 格式	
				
				setfacl -x u:用户名 文件名  删除指定用户的ACL权限
				setfacl -x g:组名 文件名  删除指定用户组的ACL权限
				setfacl -b  文件名  删除文件的所有的ACL权限
				
		ACL默认权限与递归权限
			递归ACL权限   仅能赋予目录,不能赋予文件
				递归是父目录在设定ACL权限时,所有的子文件和子目录也会拥有相同的ACL权限
				setfacl -m u:用户名:权限  -R 目录名           -R 递归 
				建议: 递归ACL权限会产生权限溢出,尽量使用常规的所有者,所属组,其他人,少用ACL递归权限
			默认ACL权限
				默认ACL权限的作用是如果给父目录设定了默认ACL权限,那么父目录中所有新建的子文件都会继承父目录的ACL权限
				setfacl -m d:u:用户名:权限 目录名			d 默认default
			两者区别:递归是对当前目录下已经存在的文件  默认是对以后新建的文件	
		
	sudo权限
			root把本来只能超级用户执行的命令赋予普通用户执行  
			sudo的操作对象是系统命令
			
			visudo  实际修改的死/etc/sudoers文件
			root 	ALL 		= 		(ALL)  					ALL 
			用户名  被管理主机地址    (可使用的身份) 授权命令  (绝对路径)
			# %wheel	 ALL 	 =  	(ALL)  			 ALL
			%组名	被管理主机地址	  (可使用的身份) 授权命令	(绝对路径)
			user1  ALL = /sbin/shutdown -r now  授权普通用户重启命令  
			普通用户执行sudo赋予的命令
			su - user1 
			sudo -l   查看可用的sudo命令
			user1用户也只能执行 sudo /sbin/shutdown -r now ,不能执行关机命令
			
			user1 ALL =/usr/sbin/useradd				赋予user1添加用户权限
			user1 ALL =/usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd "", !/usr/bin/passwd root  赋予用户user1给其它用户添加密码权限,不允许修改root用户密码
			不允许给普通用户赋予 /sbin/vi 权限,使用sudo赋予权限一定小心 
			
	文件特殊权限
		SetUID  不安全 
			只有可执行的二进制程序才能设定SUID权限
			命令执行者要对程序拥有x执行权限
			命令执行者在执行程序时获得该程序文件属主的身份(临时获得属主权限)
			SetUID权限只在该程序执行过程中有效,执行过程中临时有效,执行结束自动失效
			
			ll /usr/bin/passwd   		passwd命令拥有SetUID权限,所有普通用户可以修改自己的密码
			#		-resr-xr-x.  root root 25980 2月 22 2018 /usr/bin/passwd
			ll /bin/cat					cat命令没有SetUID权限,所有普通用户不能查看/etc/shadow 文件内容
			#		-rwxr-xr-x.  root root 47976 2月 22 2018 /usr/bin/passwd
			
			设定SetUID方法        
			chmod 4755 文件名    4代表 SUID
			chmod u+s 文件名
			
			取消SetUID方法
			chmod 0755 文件名
			chmod u-s 文件名
			
			注意SetUID:
			关键目录应严格控制写权限  比如 "/"、"/usr" 等
			用户的密码设置应严格遵守密码三原则
			对系统中默认应该具有SetUID权限的文件做一列表,定时检查有没有在这之外的文件被设置了SetUID权限
			
			vi suid_check.sh       一般执行之前,删掉中文注释,否则有可能报错
			
			#!/bin/bash
			
			find  / -perm -4000  -o  -perm -2000  > /tmp/seruit.check
			#搜索系统中所有拥有SUID和SGID的文件,并保存到临时目录
			for i in $(cat /tmp/setuid.check)
			#做循环,每次循环取出临时文件中的文件名
			do
				grep $i /root/suid.log  > /dev/null
				#比对这个文件名是否在模板文件中
					if[ "$?" != "0"]
					#检查上一个命令的返回值,如果不为0,证明上一个命令报错
					then
							echo "$i isn't in listfile!" >>  /root/suid_log_$(dae + %F)
						#如果文件名不再模板文件中,则输出错误信息,并把报错保存到日志中
					fi
			done
			rm -rf /tmp/setuid.check 
			#删除临时文件
						
						
		SetGID  不安全 
			SetGID对文件的作用
				只有可执行的二进制程序才能设定SGID权限
				命令执行者要对程序拥有x执行权限
				命令执行者在执行程序时获得该程序文件属组的身份 
				SetGID权限只在该程序执行过程中有效
			
				/usr/bin/locate 是可执行二进制程序,可以赋予SGID
				执行用户lamp对/usr/bin/locate命令拥有执行权限
				执行/usr/bin/locate命令时,组身份会升级为slocate组,而slocate组对/var/lib/mlocate/mlocate.db数据库
				拥有r权限,所有普通用户可是使用locate命令查询mlocate.db 数据库
				命令结束,lamp用户的组身份返回为lamp组
			SetGID对目录作用
				普通用户必须对此目录拥有r和x权限,才能进入此目录
				普通用户在此目录中的有效组会变成此目录的属组
				若普通用户对此目录拥有w权限时,新建的文件的默认属组是这个目录的属组
			设定SetGID
				chmod 2755 文件名
				chmod g+s 文件名
			取消SetGID
				chmod 0755 文件名
				chmod g-s 文件名
			
		Sticky BIT  安全
			SBIT粘着位作用
				粘着位目前只对目录有效
				普通用户对该目录拥有w和x权限,即普通用户在此目录拥有写入权限
				如果没有粘着位,因为普通用户拥有w权限,可以删除此目录下的所有文件,包括其他用户建立的文件.
				一旦赋予了粘着位,除了root可以删除所有文件,普通用户就算拥有w权限,也只能删除自己建立的文件,不能删除其它用户建立的文件
			设置粘着位
				chmod 1755 目录名
				chmod o+t  目录名
			取消粘着位
				chmod 0777  目录名
				chmod o-t 目录名
			
	不可改变位权限
			chattr权限
			chattr [+-=] [选项] 文件或目录名 
				选项: + 增加权限	- 删除权限		= 等于某权限
				i insert 插入  	对文件设置i属性,不允许对文件进行删除、改名,也不能添加和修改数据
								对目录设置i属性,只能修改目录下文件的数据,不允许建立和删除文件
				a  append 追加  对文件设置a属性,只能在文件中增加数据,不能删除、修改数据
								对目录设置a属性,只允许在目录中建立和修改文件,不能删除文件
								
			lsattr  选项  文件名  查看文件系统属性
				选项: -a  显示所有文件和目录
					  -d  若目标是目录,仅列出目录本身的属性,而不是子文件的属性

		pam  和 selinux 大部分情况不需要知道



















