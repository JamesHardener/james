Netty


什么是Netty
	高性能 事件驱动 异步非阻塞 			 如 ： 阿里dubbo      Apache的Mina
	基于NIO的客户端 服务器端编程框架      实现某些协议 简化  网络应用服务( UDP TCP的socket服务)的开发，
	稳定性和伸缩性 							吸收 多种协议的经验 经过精心设计，找打了一种平衡

使用场景
	高性能领域        游戏 大数据 分布式计算
	多线程并发领域    多线程采用React模型 (由多路复用器器 事件分发器 事件处理器) 
					分为 
					单线程   所有IO都由一个线程完成
					多线程 	 React模型
					主从多线程   每个React模型线程都在在自己的独立线程执行
	异步通信领域    作为异步的NIO框架
	
前置知识 有一定java基础 IO编程基础  了解Java的BIO 伪异步IO NIO AIO


BIO通信 ：  一个线程负责连接    一请求 一应答  缺乏弹性伸缩能力
	
BIO通信模型：
通常由一个独立的Acceptor线程负责监听客户端的连接，接收到连接之后为每个连接创建新的线程进行链路处理，处理完成后通过输出流返回应答，此时线程销毁。

伪异步IO 线程池负责连接 M请求N应答  线程池阻塞    
	模型：	当有新的客户端接入，将客户端的Socket封装成Task 投递到后端的线程池

NIO
	缓冲区Buffer  通道Channel  多路复用器Selector 轮询多路Channel ，没有最大连接数的限制

AIO
	连接注册读写事件 和回调函数  读写方法异步  主动通知程序
 
四种IO对比

		客户端个数      IO类型              API使用难度      调试难度  可靠性		吞吐量
BIO		1:1				同步阻塞			简单			  简单		非常差		低
伪IO	M:N				同步阻塞			简单			  简单		好一点 差	中等
NIO		M:1				非同步阻塞			复杂			  复杂		高一些		高
AIO		M:0 			非阻塞异步			复杂相对NIO简单	  复杂		比较高		高


原生NIO的缺陷
	类库 和API复杂   入门门槛高  工作量难度大 JDK的NIO存在Bug
Netty 的优势
	API简单 入门门槛低  性能高 成熟 稳定


WebSocket 入门 
	H5协议规范  握手机制  解决客户端和服务器端实时通信而产生的技术
	
优点： 节省通信开销  服务器主动传送数据给客户端 实时通信 

建立连接：
		客户端发起握手请求
		服务端响应请求
		建立连接
生命周期：
	打开事件  Session 对象 配置对象 一组路径参数
	消息事件  文本 二进制 Pang消息
	错误事件  入栈异常(入栈 解码，运行时错误)
	关闭事件  任意端点发出

关闭连接	
	服务器关闭底层TCP连接  		正常
	客户端发起TCP Close			异常
















