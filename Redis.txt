
简介
	
	NoSQL
		Not Only SQL  非关系型的数据库
	为什么需要
		High performance  高并发读写
		Huge Storage  海量数据的高效率存储和访问
		High Scalability && High Availability  高可扩展性 和 高可用
	NoSQL数据库的四大分类 
		键值对存储		Redis 快速查询
		列存储   		hBase  查找数据比较快、扩展性强   功能局限
		文档数据库		MongoDB 数据库的数据结构要求不是特别严格  查询性能不是特别好 缺少统一查询的语法
		图形数据库 		Info Grade 应用场景 社交网络 不容易做分布式的
	NoSQL的特点
		易扩展 灵活数据模型 大数据量 高性能 高可用 

	REmote  DIctionary  Server 远程字典服务器  以字典结构存储数据 允许其它应用通过TCP协议读写字典中的内容，可以是字符串 、散列 列表 集合 

	Redis数据库中的所有数据都存储在内存中，因此读写速度很快 1 秒读写超过10万个键值。提供异步写数据到硬盘，不影响提供服务。
	虽然是作为数据库开发的，但是广泛应用在 缓存 队列系统 等  
	Redis可以为每个键设置生存时间，到期后自动被删除。
	可以限定 数据占用的最大内存空间，当数据达到限制，按照一定规则自动淘汰不需要的键。
	Redis的列表类型 键 可以用来实现队列，并且支持阻塞式读取 ，可以容易实现高性能的优先级队列，还支持发布、订阅的消息模式
	Redis提供了几十种不同编程语言的客户端库，封装了Redis命令 ，使得程序与Redis交互更容易。使用C语言开发的，三万行代码。开源的
	//  https://gist.github.com/348262  提供了一个 聊天室的例子
	应用场景： 缓存 任务队列 应用排行榜 网站访问统计 数据过期处理 分布式集群架构中的session分离
	
	
准备
	下载解压
	wget http://download.redis.io/redis-stable.tar.gz
	tar xzf redis-stable.tar.gz
	cd  redis-stable
	make
	make test  //测试Redis 是否编译正确
	最好在编译后直接执行 make install命令将可执行程序复制到 /usr/local/bin目录，以便以后不用输入完整的路径
	
	安装Redis
	Redis可执行文件说明
	文件名							说明
	redis-server					Redis服务器
	redis-cli						Redis命令行客户端
	redis-benchmark				Redis性能测试工具
	redis-check-aof				AOF文件修复工具
	redis-check-dump				RDB文件检查工具
	redis-sentine1					Sentinl服务器
	
	启动Redis
		1 直接启动 			redis-server				
								redis-server --port 6380   //可以使用--port参数自定义端口号   , 默认端口号 6379
		2  初始化脚本启动
	停止Redis
		redis-cli  SHUTDOWN   //当Redis收到停止命令后，断开所有客户端，然后根据配置 执行持久化，最后退出
		kill  Redis 的进程端口号也可以
	
		发生命令：
		1. 将命令作为 redis-cli 参数执行 
		redis-cli -h 127.0.0.1 -p 6379
		redis-cli PING
		2. 不带参数执行 redis-cli
		redis-cli
		PING
		ECHO hi
		
		命令返回值：
		 状态回复  向 Redis 发生SET指令设置某个键值，成功以后回复状态 OK  ，PING命令 回复 PONG 
		 
		 错误回复  ERRORCOMMEND
		 
		 整数回复  虽然没有整数类型，但是提供整数操作命令（INCR 递增键值、DBSIZE获取键值数量）以 (integer)开头，后面跟上 整数数据
		 
		 字符串回复 常见回复类型，当请求一个字符串类型键的键值 （当请求的键值不存在）， 字符串回复以双引号包裹
		 
		 多行字符串回复 常见，当请求一个字符串类型的键 的元素列表时，多行字符串回复，每行字符串以一个序号开头
		 
	配置
		是否开启持久化 日志级别
		redis-server /path/to/redis.conf --loglevel warning //通过启动参数传递同名的配置选项会覆盖配置文件中相应的参数
		
		CONFIG SET loglevel  warning   //通过 CONFIG SET 命令来动态修改Redis配置
		
		Redis提供 一个配置文件模板 redis.conf位于 源代码目录
		
		Redis 后端启动  修改redis.conf 文件中的 daemonize no 改为daemonize yes ，输入./bin/redis-server ./redis.conf 
		
	多数据库
		
		每个数据库对外都是以一个 从0 开始的递增数字命名，默认支持16个数据库，可以通过修改databases 来修改这个数字，客户端与Redis建立连接以后会默认选择0号数据库，不过可以通过SEALECT命令更换数据库 （SELECT 1  选择1号数据库）
		Redis 不支持自定义数据库名字，以编号命名，不支持每个数据库设置设置独立访问密码，多个数据库之间不是完全隔离的。
		
入门
	获取符合规则的键名列表： KEYS pattern  
		patter支持glob风格通配符个  		？ 匹配一个字符  * 匹配任意个字符   []  匹配括号间4任意字符，可以使用-表示一个范围  \x  匹配字符x ，用于转义
		
		SET bar 1    //   建立一个名 为 bar 的键 值为1             
		KEYS  *   //  Redis  不区分大小写，但是推荐  命令使用 大写 ，KEYS命令需要遍历Redis 中的所有键值，当键值比较多的时候不建议在生产环境使用
		EXISTS bar   //判断一个键是否存在，true 返回1  false 返回0
		DEL    bar   //删除一个键  
		TYPE  foo  //获取键值的数据类型  返回值可能是 string  hash   list  set  zset 
		LPUSH  bar 1   //LPUSH 命令 作用是 向指定的列表类型键中 增加一个元素，键不存在就创建它。
		
	字符串类型  是Redis中最基本的数据类型，可以存储 任何形式的字符串，包括二进制数据，用户的邮箱、JSON化的对象， 一张图片，允许存储的最大容器512MB，是其他4种数据类型的基础。
		命令：
		赋值取值 		 	SET  key  value        GET  key 
		递增数字  			INCR  key 			整数增加
								INCRBY key  increment   increment指定一次增加的数值
		减少指定整数		DECR  key  decrement 
		增加指定浮点数		INCRBYFLOAT key increment 
		向尾部追加值		APPEND key value			键值不存在，将键值设置为value，返回值是追加后字符串的总长度
		获取字符串长度		STRLEN  key 				键不存在，返回0
		同时获取或设置多个键值  MGET key [key...]  		MSET key value[key value ]
		位操作
								GETBIT key offset		获取字符串类型键指定位置的 二进制位的值，索引从0 开始，如果超出长度，默认为0
								SETBIT key offset value	设置字符串类型键指定位置的 二进制位的值，返回值是该位置 旧值
								BITCOUNT  key [start] [end]	获取字符串类型键 中键值为 1 的二进制位 个数
								BITOP operation destkey key [key ...]  对多个字符串类型键 进行位运算，AND OR XOR NOT
								
	散列类型   Hash  键值也是一种 字典结构，存储了字段和字段值的映射，字段值 只能是字符串 ，不支持其它类型。 
		适合存储 对象 使用对象类别   和 ID 构成键名  ，使用字段 表示对象的属性 ， 字段值 存储属性值
		键   字段  字段值  [字段 字段值 ...]
		命令：
		赋值取值
								HSET key field  value        给字段设置值
								HGET key  field					获取字段值
								HMSET key  field value [ field value ...] 给多个字段同时设置值
								HMGET key  field [field...]	获取多个字段的值
								HGETALL  key 					获取所有字段的值，不知道有哪些字段使用HGETALL命令
		判断是否存在		HEXISTS  key  field			存在返回1 否则返回0 ，如果键值不存在，返回0
		当字段不存在赋值	HEXISTS  key  field  value   字段值存在，不执行命令，HSETNX命令是原子操作，不存在竞态条件
		增加数字				HINCRBY  key  field  increment 
		删除字段				HDEL key  field  [field...]	返回值是被删除的字段个数
		只获取字段名、值	HKEYS key 	  HVALS key		HVALS用来获取键中所有字段值
		获得字段数量		HLEN key
		
	列表类型  可以存储一个有序的字符串列表，常用的操作是向列表两端添加元素或者获取列表的某一个片段。
		内部使用双向链表 实现的，通过索引访问元素比较慢。两端添加元素的时间复杂度为O（1）,越接近两端速度越快。
		应用场景：社交网站的新鲜事  
		容量：和散列列键最多容纳的字段数量相同，最多容纳2^32 - 1 个元素。
		向两端添加元素		LPUSH key value  [value...]		返回值 表示增加元素后 列表的长度
								RPUSH key  value [value...] 
		从两端弹出元素		LPOP   key							返回值  被移除的元素
								RPOP	key
		获取列表元素个数  LLEN   key							类似SQL中select count(*) from table_name ,但复杂度O（1），直接读取现成值。
		获取列表片段		LRANGE key start  stop			返回值包含 最右边的元素
		
		删除列表指定的值  LREM	key	count value          返回值 是 实际 删除元素的个数
								count > 0		从列表左边开始删除前 count 个值为 value的元素
								count < 0		从列表右边开始删除前 |count| 个值为 value的元素
								count = 0		删除索引值为 value的元素
	获取指定索引的元素值 LINDEX key index
								LSET key index value
	只保留列表指定片段	LTRIM key start end 		删除指定索引范围之外的所有元素
	向列表插入元素			LINSERT key BERORE|AFTER  pivot  value 从左到右查找值为pivot的元素，根据before还是after 决定插入位置
	元素从一个列表到另一个 RPOPLPUSH source  destination    先执行RPOP ，再 LPUSH命令
					伪代码   def rpoplpush ($source ,$ destination )
										$value = RPOP  $source
										LPUSH  $destination , $value
										return   $value
		
	集合类型
		列表有序 不唯一，集合无序、唯一，至多2^32 -1 个字符串
		集合类型 常用操作 向集合添加或删除元素，判断某个元素是否存在 ，多个集合类型 之间可以进行 并集 交集 差集运算
		应用场景：存储文章标签
		命令：
		增加 删除元素				SADD key member{member...}  返回值  成功加入到集合的元素数量
										SREM key member[member...]	
		获取集合所有元素			SMEMBERS key					返回所有元素
		判断是否存在				SISMEMBER key member
		集合间运算					SDIFF  key [key...] 			差集运算
										SINTER key [key...] 			交集运算
										SUNION key [key...]				并集运算
		获取集合元素个数			SCARD  key   
		进行集合运算并存储结果  SDIFFSTORE destination key [key...]   SDIFFSTORE与SDIDD功能一样，但是前缀不会直接返回运算结果
										SINTERSTORE destination key [key...]
										SUNIONSTORE destination key [key...]
		随机获取集合元素			SRANDMEMBER key [count] 
		从集合弹出一个元素		SPOP key 
		
	有序集合类型	  相对来说 是最高级的 类型
			应用场景：大数据排序，如游戏玩家排行榜
			
			有序集合类型和列表类型
			相同：二者都有序，都可以获得某一范围的元素
			不同：列表		链表实现，获取两端数据快，适合很少访问元素的应用  不能简单调整元素位置 省内存
					有序集合  使用散列表和跳跃表实现，即使读取中间 也很快  可以更改元素位置     耗内存
		增加元素						ZADD key score member [score member...] 
		获取元素分数				ZSCORE key  member
		获取排名在某个范围的元素 ZRANGE  key start stop [WITHSCORES ]
										 ZREVARNGE  key start stop [WITHSCORES ] 
		获取指定分数范围的元素  ZRANGEBYSCORE key min max [WITHSCORES ] [ LIMIT offset count ] 
		增加某个元素的分数		ZINCRBY key increment member 
		获得集合元素的数量		ZCARD key
		获得指定分数范围内的元素个数  ZCOUNT key min max
		删除一个或多个元素   	ZREM key member [member...] 
		按照排名范围删除元素		ZREMRANGEBYRANK  key member [ member...] 
		按照分数范围删除元素		ZREMRANGEBYSCORE  key min max 
		获得元素的排名				ZRANK key member 			从小到大
										ZREVRANK key member 
		计算有序集合的交集
		ZINTERSTORE  destination  numkeys key [key...] [WEIGHTS weight [weight...]] [AGGREGATE SUM|MIN|MAX]  
		destination 键中的元素的分数由 AGGREGATE 参数决定。
	

	
进阶

	事务    一组命令集合，是Redis中最小的执行单位。
		Redis事务原理： 先将属于一个事务的命令发送给Redis ，然后再让Redis依次执行这些命令。
		应用场景：存储微博用户关系
		Redis保证一个事务的所有命令要么都执行，要么都不执行。发送EXEC之前，断开客户端，Redis清空事务队列，否则，执行所有命令。
		
		错误处理：语法错误  、运行错误，不支持事务回滚，保持简洁快速
		WATCH命令 ： 监控一个键 或者多个键 ，一旦一个键被修改，之后的事务就不会执行
		（只阻止之后的一个，不能保证其它客户端不修改），监控一直持续到EXEC命令。
		场景：避免 竞态条件
		UNWATCH   取消监控  保证下一个事务的执行不受到影响。
		
		
	过期时间
		过期时间：限制访问次数 设置自动过期    
				EXPIRE 设置一个键的过期时间，单位 秒  ，返回1 设置成功 ，0 表示不存在或者设置失败
						SET session：29e3d uid1314  
						EXPIRE  session：29e3d 900   //session：29e3d  十五分钟后被删除
				TTL	查询还有多久被删除               没有设置过期时间 默认返回 -1 ，不存在返回 -2 
				PEXPIRE 		设置过期值 单位毫秒 ，使用WATCH命令监控，过期被删除 不会被WATCH认为 键值被改变。
			限制1：	rate.limiting:用户IP的字符串类型键，每次访问用INCR自增，超过自动删除。如果异常退出，键永久保存，导致只能访问100次。
			限制2：	rate.limiting:用户IP的列表类型键，如果超过1分钟10次，自动删除最早的元素
		实现缓存：修改配置文件的maxmemory参数，限制Redis最大可用内存大小，单位字节，当超过限制，依据maxmemory-policy参数 指定删除不需要的键(LRU最近最少用，认为以后也少用)
		
	排序
		实现ZINTER：
						MULTI
						ZINTERSTORE  tempKey ...
						ZRANGE  tempKey...
						DEL		tempKey...
						EXEC
		SORT命令： 对列表 集合 有序集合 类型的键进行排序，并完成与关系型数据库的连接查询相似的任务。默认会直接返回排序结果。
					① SORT tag ：ruby：posts
					② LPUSH mylist 426137
						SORT mylist
					③ LPUSH mylist  a c  e  d  B  C  A 
						SORT mylist ALPHA    //按字典顺序排序
					④ SORT tag :ruby：posts DESC LIMIT 1  2   //DESC 倒序 排列    跳过1个   取之后的2个
					⑤ SORT tag :ruby：posts BY post：*-> time DESC
					⑥ GET 参数不影响排序，作用是 SORT命令返回结果不再是元素自身的值，是GET参数中指定的键值，可以是字符串 散列类型，并使用* 作为占位符
						SORT tag ：ruby：posts BY post：*-> time DESC GET post ：*-> title  //排序 返回ID对应的文章标题
						SORT tag ：ruby：posts BY post：*-> time DESC GET post ：*-> title GET post：*-> time	//
						SORT tag ：ruby：posts BY post：*-> time DESC GET post ：*-> title GET post：*-> time GET #	//
					⑦ SORT tag ：ruby：posts BY post：*-> time DESC GET post ：*-> title GET post：*-> time GET #  STORE sort.result//把结果保存到sort.result键中
							LRANGE sort.result 0 -1       
							STORE 参数常用来结合EXPIRE 命令缓排序结果 
					性能优化：
						SORT 是Redis中最强大的复杂命令之一，时间复杂度 O（n+mlog（m））,n 要排序列表中元素个数，m要返回的元素个数。n越大，性能越低
						注意：1尽可能减少待排序键中的元素数量（N尽可能小）
								2 使用LIMIT参数只获取需要的数据（M尽可能小）
								3 如果要排序的数据量比较大，尽可能使用STORE参数缓存结果
								
	消息通知
			任务队列：传递任务的队列 ，交互的实体类 两类，生产者 消费者  
			原理：发送邮件，页面程序将收件地址，主题 正文装进一个任务放入任务队列LPUSH，发邮件进程不断检查任务队列，有新任务就会取出RPOP执行。
			好处：松耦合  易于扩展
		任务队列：	
		BRPOR：当列表没有更新元素时，BRPOP命令会一直阻塞住队列的连接直到有新元素加入。
			BRPOP queue 0   键名   超时时间，单位秒  ，超时没有新元素，返回nil  。返回两个值 键名 元素值
		
	  优先级队列：		使用BRPOP同时检测多个键，当有一个键有元素就弹出元素。
				Redis A>   BLPOP queue ：1 queue ：2 queue：3  0
				Redis B>   LPUSH  queue 2 task
				Redis A>   "queue:2"		//键名
								"task"		//元素值
		发布/订阅模式：
				订阅者可以订阅若干频道，发布者可以向指定频道发送消息，所有订阅此频道的都收到此消息。
				发布者发布消息：PUBLISH channel message
				订阅者命令：SUBSCRIBE  channel [channel ... ] 
				执行SUBSCRIBE命令后客户端进入订阅状态，此时不能使用除SUBSCRIBE 、UNSUNSCRIBE、PSUBSCRIBE、PUNSUBSCRIBE之外的命令。
				进入订阅状态后客户端可能受到3种类型的回复，每种都包含3个值。
				第一个消息类型									第二个						第三个
				subscribe  订阅成功							频道名称						当前客户端订阅的频道数量
				message    接收到的消息						频道名称						消息的内容
				unsubscribe  成功取消订阅某个频道		频道名称						当前客户端订阅的频道数量 ，当为0时，客户端退出订阅状态。
			按照规则订阅：
					PSUBSCRIBE 命令订阅指定的规则，规则支持glob风格通配符格式。可以重复订阅一个频道
					PSUBSCRIBE  channel.?*          //
			退订指定的规则
					PUNSUBSCRIBE  进行严格的字符串匹配
					PUNSUBSCRIBE  [pattern  [pattern...]]     //没有参数退订 所有规则
					PUNSUBSCRIBE   channel.*  					//退订channel.*  规则
					PUNSUBSCRIBE命令只能退订通过 PSUBSCRIBE命令订阅的规则，不影响直接通过SUBSCRIBE命令订阅的规则
					UNSUBSCRIBE命令也不影响通过PSUBSCRIBE命令订阅的规则
					
	管道
		客户端和Redis使用TCP协议连接，网络传输命令和返回结果，两个过程总耗时称为往返时延。当执行命令较多时候，影响性能。
		Redis底层通信协议 对管道 提供了支持，通过管道可以一次性发送多条命令并执行完后  一次性将结果返回。每一条命令都不依赖前面的执行结果，可以一次将这组命令发送，减少往返时延。
		
	节省空间
		Redis是一款基于内存的数据库，减少内存空间占比 是对成本控制的重要话题
		
		1. 精简键名 和键值       易于维护、避免命名冲突、易于理解
			very.important.person :20   改为VIP：20  
			存储字符串类型键取值 male和female ，可以修改为m 和f，最好使用0 、1来表示性别
		2. 内部编码优化
			OBJECT ENCODING  foo //查看 一个键的内部编码方式
			当键中的元素比较少的时候，Redis会使用一种更为紧凑性能稍差的内部编码方式，当键中元素比较多，转换成散列列表。
			字符串类型：Redis使用sdshdr 类型的变量存储字符串，redisObject的ptr字段指向的是该变量的地址。
			struct sdshdr{
				int len;	//字符串长度
				int free;	//buff声音空间
				char buf[];//字符串的内容
			};
			使用REDIS_ENCODING_EMBSTR编码存储字符串后，不论分配内存还是释放内存，所需操作从2次变1次，连续内存，当键值内容不超过39字节，采用REDIS_ENCODING_EMBSTR编码，同时对使用REDIS_ENCODING_EMBSTR编码的键值进行修改操作时，Redis会将其转换成REDIS_ENCODING_RAW编码
			
			散列类型：内部编码可能是REDIS_ENCODING_HT或者REDIS_ENCODING_ZIPLIST  在配置文件中可以使用REDIS_ENCODING_ZIPLIST 方式编码散列类型的时机
						hash-max-ziplist-entries 512
						hash-max-ziplist-value  64
						当散列类型键的字段数少于hash-max-ziplist-entries参数值且每个字段名和字段值的长度都小于hash-max-ziplist-value 参数值是Redis会使用REDIS_ENCODING_ZIPLIST来存储该键，否则使用REDIS_ENCODING_HT，转换是透明的。
						
						REDIS_ENCODING_HT 编码 即 散列表，可以实现O（1）时间复杂度的赋值取值等操作，其字段和字段值都是使用redisObject存储的，字符串的优化同样适用于散列类型键。
						Redis的键值对存储也是通过散列表实现的，支持多个数据库，每个数据库中的数据都是通过结构体redisDb存储的
						redisDb 定义：
						typedef  struct redisDb {
							dict *dict;   				//散列表结构
							dict *expired; 				//存储数据的过期时间，当redis启动时会根据配置文件中的databases 参数指定数量创建若干个 redisDb 类型变量存储不同的数据库中的数据
							dict *blocking_keys;  	//Keys with clients waiting for data (BLPOP)
							dict *ready_keys;			//Blocked keys that received a PUSH
							dict *watched_keys;		// WATCHED keys for MULTI/EXEC CAS 
							int 	id;
						} redisDb;
						REDIS_ENCODING_ZIPLIST编码类型是一种紧凑的编码格式，牺牲了读取性能换取极高的空间利用率，适合在元素较少的时使用。
						每个元素由四部分组成
						第一部分 存储前一个元素的大小以实现倒序查找，当前一个元素小于254字节时，第一部分占用1个字节，否则占用5个字节
						第二 三部分  存储元素的编码类型和元素大小， 当前一个元素小于等于63字节时，第二 三总占1字节，大于63 小于16383时，第二三总占用2字节，大于16383字节，第二三总占5字节。
						第四部分		元素的实际内容	  如果可以转换成数字Redis会使用相应的数字类型存储节省空间，用第二三部分表示数字类型。
						存储散列类型的元素时的排列方式 元素1 存储字段1，元素2 存储字段值1，故不宜把两个值设置很大。 
						
			列表类型：内部编码可能是 REDIS_ENCODING_LINKLIST 或者 REDIS_ENCODING_ZIPLIST  具体转换方式和散列类型一样
			REDIS_ENCODING_LINKLIST 编码方式是 双向链表，链表中的每一个元素使用redisObject 存储，元素值的优化和字符串类型的键相同。
			REDIS_ENCODING_ZIPLIST 和散列类型一样，同样支持倒序访问，获取两端元素比较快
			新版REDIS_ENCODING_QUICKLIST 编码方式是 REDIS_ENCODING_LINKLIST 和REDIS_ENCODING_ZIPLIST的结合，原理是将一个长列表 分成若干个 以链表形式组织的ziplist，减少空间占用的同时提升性能。
			
			集合类型：REDIS_ENCODING_HT 或 REDIS_ENCODING_INTSET ，当集合中的所有元素都是整数且 元素的个数小于配置文件中的set-max-intset-entries 参数指定值512，Redis会使用REDIS_ENCODING_INTSET编码存储该集合，否则使用REDIS_ENCODING_HT来存储。
				REDIS_ENCODING_INTSET 编码存储结构体 intset 定义是：
				typedef  sturct  intset{
					uint32_t encoding;
					uint32_t length;
					int8_t contents[];
				} intset;     
				contents存储的是集合中的元素值根据encoding 的不同，每个元素占用的字节大小不同，默认encoding 是INTSET_ENC_INT16，当新增加的整数元素无法使用2个字节表示，Redis会升级encoding为INTSET_ENC_INT32，还可以最大升级到INTSET_ENC_INT64.
				REDIS_ENCODING_INTSET编码 以有序的方式存储 元素 使得可以使用二分算法查找元素，无论是添加还是删除元素，Redis都需要调整后续 元素的位置 ，当集合元素太多时，性能很差。
				当新增加的元素不是整数或集合中的元素数量 超过entries参数指定值Redis会自动转换存储结构为HT，即使将集合中所有非整数元素删除，Redis也不会主动转换存储结构。
				
			
			有序集合类型： REDIS_ENCODING_SKIPLIST 或 REDIS_ENCODING_ZIPLIST 
						hash-max-ziplist-entries 128
						hash-max-ziplist-value  64
			 具体规则和散列、列表类型一样。
			 REDIS_ENCODING_SKIPLIST：Redis使用散列表 和 跳跃列表存储有序集合 类型键值
			 散列表 存储元素值 与元素分数的映射关系，以实现O（1）时间复杂度的ZSCORE命令
			 跳跃列表存储 元素的分数及 其到元素值的映射以实现 排序的功能。允许列表中的元素相同、为每一个节点增加指向前一个元素的指针，以实现倒序查找。
			 元素值使用 redisObject存储，元素的分数 使用double类型存储
			 REDIS_ENCODING_ZIPLIST：有序集合方式  元素1 分数1 ，元素2 分数2 顺序排列，分数是有序的。
实践
	PHP与Redis
	
	Ruby 与Redis
	
	Python 与Redis
	
脚本
	使用脚本的好处：
	1. 减少网络开销：以前发送多次请求，现在发送一次，减少网络往返时延
	2.	原子操作：整体执行，中间不会被其它命令插入，不需要担心竞态条件 ，不需要使用事务
	3.	复用：客户端发送的请求永久存储在Redis
	限制访问频率：
	redis-cli --eval /path/to/ratelimiting.lua   rate.limiting: 127.0.0.1  ,  10  3 
	--eval 参数告诉 redis-cli 读取运行后面的Lua脚本  
	/path/to/ratelimiting.lua  是ratelimiting.lua文件的位置，后面跟的是Lua脚本的参数，  逗号前的是 需要被操作的键 
	
	Lua 语言
		Lua是一个 高效的轻量级脚本语言，又称 卫星语言，能够方便嵌入其它语言。
		
		Lua语法：
		1 数据类型： Lua是一个动态类型语言，可以存储任何类型的值。
			空nil：只包含一个值nil ，故没有赋值的变量或表的字段都是nil
			布尔：true false两个值
			数字：整数 浮点数 如1 0.2 3.5e20 等
			字符串：二进制安全，可以使用单引号或双引号表示 ，还可以包含转义字符
			表：唯一的数据结构，既可以当数组，也可以当字典
			函数：一等值first-class value 可以存储在变量中，作为函数的参数或返回结果
		
		2. 变量：全局 局部，全局无需声明直接使用，默认nil，Redis脚本中不能使用全局变量，防止互相影响。
		局部变量：声明使用 local + 变量名，如local e , f ,  
		变量名必须非数字开头，只能包含字母数字下划线，区分大小写，不能使用保留关键字 ，作用域从声明开始到所在层的语句块结束。
		
		3. 注释：单行	 -- 开始 ...  					  多行       --[[开始 ，到]]  结束，如   --[[    ......   ]]  
		
		4.	赋值：支持多重赋值， local a , b    =  1 , 2 , 3    // a = 1  , b  = 2 ,  3被舍弃
		
		5.  操作符：
			数字操作符： + - * / %取模 -取负 ^幂 
			比较操作符： == 比较类型和值是否相等   ~= 与==结果相反    < , >  , <=  , >=  比较的结果一定是布尔值  tonumber函数可以进行进制转换
			逻辑操作符：not 根据真假返回false 和true     
							and  a and b ,若a真，返回b，否则返回a          
							or 	a or b ,若a假，返回a ，否则返回b
			连接操作符： 只有一个  ..    用来连接两个字符串 ，会自动把数字类型的值转换 为 字符串类型
			取长度操作符：#   如 print（#'hello'）                        -- 5 
			
		6.  if 语句
					if   条件表达式 then  
							语句块
							elseif  条件表达式 then
							语句块
							else
							语句块
						end
							Lua中只有nil和false 才是假，其余包含空字符串和0都是被认为真值。
							Redis的EXISTS 命令返回值1和0表示存在、不存在，exists变量的值都是true
							每个语句都可以  以 ; 结尾，一般都会省略，不强制缩进，也可写在一行，但为了增强可读性，注意缩进。
		7.  循环语句
			while 语句
			while 条件表达式 do
				语句块
			end
			
			repeat语句
			repeat
					语句块
			until  条件表达式

			for语句		其中步长默认1，可以省
			for 变量= 初值 ，终值 ， 步长 do
				语句块
			end	
			通用for语句
			for  变量1 ，变量2 ，。。。 变量n in  迭代器 do 
				语句块
			end 
			
		8.  表类型; Lua约定 数组索引从1 开始 
			a = {}
			a = { name = 'Bob'  , age = 29 }
			a = { a[1] = 'Bob '   a[2] = 'Jef'}
			ipairs是Lua内置函数，实现类型迭代器的功能。也可以使用数字形式for语句遍历数组，从索引1开始递增遍历到最后一个不为nil的整数索引。
			for i= 1, #a do
				print（i）
				print（a[i]）
			end	
			迭代器pairs，遍历非数组的表值。 遍历所有值 不为nil的索引
		9.  函数：function （参数列表）
							函数体
						end
					如  local square = function （num）
							return num*num*num
						end
						Lua提供了一个语法糖简化函数的定义
							local function square （num）
								return num*num
							end	
		
		标准库：提供很多实用的函数，迭代器ipairs 和pairs  类型转换函数 tonumber 和tostring   unpack函数等都属于 Base 库。
		Base 基础函数   String 字符串操作函数   Table 表操作函数   Math 数学计算函数   Debug  调试函数
		1.  String库  通过字符串类型的变量 以面向对象的形式 访问
			string.len(string)   获取字符串长度 
			string.lower(string)
			string.upper(string)
			string.sub(string , start [ , end ]) 
		2.  Table库  大部分需要表的形式 是数组
			数组转字符串 table.concat(table[ ,sep [ , i [ , j ]]])    //sep 参数指定字符串分割，默认空，i j 用来限制转换的元素索引范围 ，默认1 和表长度，不支持负索引
			  print（table.concat({1,2,3,4,5,6} , ',' , 2 )）             -- 23456
			 数组插入元素table.insert(table , [ pos, ] , value ) 
			 弹出元素 table.remve(table [ , pos ])
		
		3.  Math库 
			math.abs(x) 绝对值  sin  cos tan ceil进一取整 floor向下取整  max min pow乘积 sqrt平方根 random 随机数
		
		4.  其他库 对JSON 和MessagePack 支持 
		
	Redis 与Lua
		redis.call （'set' , 'foo' , 'bar'）出错直接返回错误，redis.pcall记录错误吗，继续执行
		脚本很多情况下需要返回值，到客户端，没有执行脚本返回nil  ，将Lua数据类型 转换成 Redis的返回值类型
		脚本命令
		EVAL命令  EVAL 脚本内容 key参数数量[key...][arg...],通过参数向脚本传递数据，他们的值可以在脚本中分别使用KEYS和ARGV两个表类型的全局变量访问。
		EVALSHA命令：允许通过EVALSHA命令通过脚本内容的SHA1摘要 来执行脚本。
		由来：当脚本比较长，每次调用都需要把脚本传给Redis会占用很多带宽。
		Redis在执行EVAL命令的时候会计算脚本的SHA1 摘要并记录在脚本缓存中，执行EVALSHA 时，Redis会根据提供的摘要从脚本缓存中查找对应的脚本内容，找到执行脚本，否则返回错误
		流程：1计算脚本的SHA1 摘要，并使用EVALSHA命令执行脚本
				2 获得返回值，如果返回“NOSCRIPT” 则使用EVAL命令重新执行脚本。
				
	深入脚本
			SCRIPT LOAD  		将脚本加入缓存
			SCRIPT EXISTS		判断脚本是否存在
			SCRIPT FLUSH		清空脚本缓存
			SCRIPT  KILL     	强制终止当前脚本
			Redis脚本的执行都是原子的，执行期间不会执行其他命令，为了防止某个脚本执行时间过长，Redis提供了lua-time-limit参数限制脚本运行的最长时间默认5秒，超过运行最长时间之后，Redis开始接受其他命令但是不会马上执行，返回BUSY错误
持久化
	
	RDB方式  通过快照，当符合一定条件，Redis会自动将内存中的所有数据生成一份副本保存在硬盘上，这个过程称为快照
	执行快照的情况： 1 根据配置规则进行自动快照  2  用户执行SAVE或BGSAVE命令   3 执行 FLUSHALL命令  4 执行复制
		1   save 900  1        //15分钟有一个或一个以上的键 被修改 执行快照 
			save 300  10		//
			save 60   100000	//
		2   推荐使用BGSAVE 命令，执行快照时候还可以继续进行服务，立即返回OK开始执行快照操作，想知道是否完成，通过LASTSAVE命令获取最近一次成功执行快照的时间，返回结果是一个Unix时间戳	
		快照原理：
		默认快照存储路径：当前工作目录dump.rdb 文件中，通过配置dir和dbfilename 两个参数分别制定快照文件的存储路径和文件名。
		   1. Redis 使用fork 函数 复制 一份当前进程的副本
		   2. 父进程继续接收处理客户端发来的命令，子进程开始将内存 中的数据 写入硬盘中的临时 文件
		   3. 当子进程写入完成所有数据后，用该文件替换旧的 RDB文件，快照完成。	
		在执行fork操作的时候，操作系统会使用写时复制策略，fork函数发生的一刻父子进程共享一个内存数据，虽然看上去是两份副本，实际内存占用量不会增加一倍。
		确保Linux系统允许 应用程序 申请超过可用内存的空间，方法是在、etc/sysctl.conf文件加入 vm.overcommit_memory = 1,然后重启系统或者执行sysctl vm.overcommit_memory = 1 确保设置生效。
		   17055871166
		   zc57   10690700367
		   
		 Redis在进行快照的过程中不会修改RDB文件，只有快照结束后才会替换就文件，我们可以通过备份RDB文件实现Redis数据库备份，RDB文件是经过压缩的二进制格式，占用空间小于内存中的数据大小。
		 Redis启动以后会读取RDB快照文件，将数据从硬盘载入内存，根据数据量大小和服务器性能不同，时间不定，一旦Redis异常退出，就会丢失最后一次快照以后更改的所有数据，如果数据相对很重要，可以使用AOF。
		 
	AOF方式
		使用Redis存储非临时数据时，一般需要打开AOF持久化来降低进程终止导致的数据丢失，AOF会将Redis执行的每一条命令追加到硬盘文件。
		默认AOF不开启，通过appendonly参数启用，appendonly yes  
		AOF 文件的存储位置和RDB文件位置相同，通过dir参数设置 appendfilename    //默认文件名appendonly.aof
		
	同步硬盘数据
		虽然每次更改数据库内容的操作，AOF都会将命令记录AOF文件，但是基于操作系统的缓存机制，数据并没有真正的写入硬盘，而是进入了系统的缓存。默认情况下，昔日每30秒进行一次同步操作，以便硬盘的缓存内容真正写入硬盘，这就要求Redis在写入AOF文件后主动要求系统将缓存内容同步到硬盘。
		通过appendfsync 参数设置同步时机
				# appendfsync  always
				appendfsync  everysec
				# appendfsync no 
		默认情况Redis采用everysec 规则，每一秒执行一次同步操作 always表示每次执行写入都是执行同步，这是最安全最慢的方式 no表示不主动进行同步操作，完全交给操作系统
			Redis允许同时开启AOF和RDB
		
集群
	
	复制  主从复制
	1. redis-server  主服务器
	2. redis-server --port 6380 --slaveof  127.0.0.1 6379  从服务器 ，监听6380
	3. redis-cli -p 6379     实例A 连接主服务器
	4. redis-cil -p 6380		实例B 连接从服务器
	5.  INFO replication   分别在 实例AB中获取Replication 节的相关信息  A master  ，已连接从数据库 1 个    B slave ，其主数据库的地址为127.0.0.1 端口6379
	6.  SET foo bar       A实例设置一个foo键 ，值为bar
	7.  GET foo			  B实例获取这个键，默认从数据库只读，直接修改从数据库报错
	
	配置多态从数据库，在所有从数据库的配置文件中加上slaveof 参数指定同一个主数据库，还可以运行时，使用SLAVEOF 127.0.0.1 6379 修改。如果该数据库已经是从数据库，SLAVEOF命令会停止和原来数据库同步。
	原理：当从数据库启动以后，会向主数据库发送SYNC命令，主数据库收到SYNC后，后台保存快照，将保存快照期间接收到的命令缓存起来，快照完毕，将缓存和快照文件一次发给从数据库，从数据库收到载入收到的快照和缓存。
	载入以后，每次主数据库接收到新命令就会向从数据库同步命令。
	
	读写分离：电商网站，主数据库负责写，从数据库负责读，单个数据库不能满足需求，可以使用Redis3.0 推出的集群功能。
	增量复制：·1从数据库存储主数据库 运行ID ，实例重启会生成新的ID
				  ·2 复制同步阶段，主数据库每一个命令传给从数据库时，都会把该命令存放到一个积压队列backlog，并记录当前挤压队列存放的命令的偏移量范围
				   ·3从数据库接收到主数据库传过来的命令，会记录该命令的偏移量。
				   首先判断运行ID，再判断偏移量是否在积压队列中。
	
	哨兵  监控Redis系统运行状况，    功能： 监控主   从数据库是否运行正常          主数据库出现问题，自动将从数据库转换主数据库
	 是一个独立的进程。
	 实现原理：
	 一个哨兵进程启动时会读取配置文件的内容，通过如下的配置找到要监控的主数据库
	 sentinel monitor master-name ip redis-port quorum  
	 哨兵通过主数据库的名称获取当前系统的主数据库的地址和端口
	 master-name 主数据库名称 ip 主数据库的地址  redis-port  端口号  quorum 执行故障恢复操作前 至少需要几个哨兵节点同意。
	 和主数据库建立连接后，哨兵定时执行操作：
	 1 每10秒向主从数据库发送 INFO命令
	 2 每2秒向主从数据库的sentinel_；hello频道发送自己的信息
	 3  每1秒向主从数据库和其它哨兵节点发送PING命令
	 
	 哨兵选举：发现主数据库下线的哨兵，向各个哨兵发送命令要求选自己为领头哨兵，如果没有选过其它则会同意，如果有超过半数的哨兵节点同意，当有多个节点同时竞选，则重新发起参选请求
	 哨兵挑选新的主数据库依据：1 优先级最高的 2 复制的命令偏移量越大优先   3 运行ID 越小 优先
	 选出后，领头哨兵向 新的主数据库发送 SLAVEOF NO ONE命令 将其升格为 主数据库，向其他从数据库发送SLAVEOF命令，最后更新内部的记录，将已经停止服务的旧主数据库更新为新的主数据库的从数据库，以便当其恢复服务后，以从数据库继续服务。
	 
	 每个节点部署一个哨兵，使每个哨兵与其对应的节点的网络环境相同或者相近。
	 
	集群配置
	使用集群，只需要将每个数据库的节点 cluster-enabled 配置选项打开（port 6380  			cluster-enabled    yes），每个集群至少需要三个主数据库才能正常运行
	节点增加：CLUSTER MEET ip   port 
	分配插槽：CLUSTER SLOTS 查看插槽分配情况
管理
		
	安全
	bind 127.0.0.1 绑定一个地址，如果想更自由的设置访问规则，需要通过防火墙来完成。
	
	requirepass TAFK（@dj^shjshdjkh     为数据库设置密码
	
	通信协议
	二进制安全的统一请求协议     telnet 程序输入简单协议，命令有区别，返回值格式一样
	
	管理工具
	
	
	Jedis 入门
	
	jedis 介绍
	Jedis 是Redis 官方首选的Java客户端开发工具包,托管 https://github.com/xetorthio/jedis
	
	Jedis-jar : commons-pool2-2.3.jar   jedis-2.7.0.jar 




















































































































































































































简介





























































































































































































































































































































































































































































































































































































































































































































































































































































































